{"version":3,"sources":["atoms.tsx","components/CreateToDo.tsx","components/ToDo.tsx","ToDoList.tsx","App.tsx","index.tsx","theme.ts"],"names":["persistToDo","recoilPersist","key","storage","localStorage","persistAtom","persistCategory","toDoState","atom","default","effects_UNSTABLE","categoryState","selectedCategoryState","toDoSelector","selector","get","toDos","category","filter","toDo","CreateToDo","setToDos","useSetRecoilState","setCategories","useForm","register","handleSubmit","setValue","onSubmit","customCategory","oldCategories","includes","oldToDos","id","Date","now","text","required","placeholder","ToDo","categories","useRecoilValue","map","oldCategory","onClick","targetIndex","findIndex","newToDo","slice","ToDoList","useRecoilState","selectedCategory","setSelectedCategory","console","log","style","marginInline","value","onChange","event","currentTarget","App","GlobalStyle","createGlobalStyle","props","theme","bgColor","textColor","ReactDOM","render","StrictMode","accentColor","cardBgColor","document","getElementById"],"mappings":"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","file":"static/js/main.9fab6b1e.chunk.js","sourcesContent":["import { atom, selector } from \"recoil\";\nimport { recoilPersist } from \"recoil-persist\";\n\n// export enum Categories {\n//   \"TO_DO\" = \"TO_DO\",\n//   \"DOING\" = \"DOING\",\n//   \"DONE\" = \"DONE\",\n// }\n\nexport interface IToDo {\n  id: number;\n  text: string;\n  category: string;\n}\n\nexport interface ICategoryTodos {\n  [key: string]: string;\n}\n\nconst { persistAtom: persistToDo } = recoilPersist({\n  key: \"toDo\",\n  storage: localStorage,\n});\n\nconst { persistAtom: persistCategory } = recoilPersist({\n  key: \"category\",\n  storage: localStorage,\n});\n\nexport const toDoState = atom<IToDo[]>({\n  key: \"toDo\",\n  default: [],\n  effects_UNSTABLE: [persistToDo],\n});\n\nexport const categoryState = atom<string[]>({\n  key: \"category\",\n  default: [],\n  effects_UNSTABLE: [persistCategory],\n});\n\nexport const selectedCategoryState = atom<string>({\n  key: \"selectedCategory\",\n  default: \"\",\n});\n\nexport const toDoSelector = selector({\n  key: \"toDoSelector\",\n  get: ({ get }) => {\n    const toDos = get(toDoState);\n    const category = get(selectedCategoryState);\n\n    return toDos.filter((toDo) => toDo.category === category);\n  },\n});\n","import { useForm } from \"react-hook-form\";\nimport { useSetRecoilState } from \"recoil\";\n\nimport { categoryState, toDoState } from \"../atoms\";\n\ninterface IForm {\n  toDo: string;\n  customCategory: string;\n}\n\nfunction CreateToDo() {\n  const setToDos = useSetRecoilState(toDoState);\n  const setCategories = useSetRecoilState(categoryState);\n  const { register, handleSubmit, setValue } = useForm<IForm>();\n\n  const handleValid = ({ toDo, customCategory }: IForm) => {\n    setCategories((oldCategories) => {\n      if (oldCategories.includes(customCategory)) {\n        return oldCategories;\n      }\n      return [...oldCategories, customCategory];\n    });\n    setToDos((oldToDos) => [\n      ...oldToDos,\n      { id: Date.now(), text: toDo, category: customCategory },\n    ]);\n\n    setValue(\"toDo\", \"\");\n    setValue(\"customCategory\", \"\");\n  };\n\n  return (\n    <form onSubmit={handleSubmit(handleValid)}>\n      <input\n        {...register(\"customCategory\", { required: \"Please write a category\" })}\n        placeholder=\"Write a category\"\n      />\n      <input\n        {...register(\"toDo\", { required: \"Please write a To Do\" })}\n        placeholder=\"Write a to do\"\n      />\n      <button>Add</button>\n    </form>\n  );\n}\n\nexport default CreateToDo;\n","import React from \"react\";\nimport { categoryState, IToDo, toDoState } from \"../atoms\";\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\n\nfunction ToDo({ text, category, id }: IToDo) {\n  const setToDos = useSetRecoilState(toDoState);\n  const categories = useRecoilValue(categoryState);\n\n  const onClick = (category: string) => {\n    setToDos((oldToDos) => {\n      const targetIndex = oldToDos.findIndex((toDo) => toDo.id === id);\n      const newToDo = { text, id, category };\n      return [\n        ...oldToDos.slice(0, targetIndex),\n        newToDo,\n        ...oldToDos.slice(targetIndex + 1),\n      ];\n    });\n  };\n  return (\n    <li>\n      <span>{text}</span>\n      {categories.map(\n        (oldCategory) =>\n          oldCategory !== category && (\n            <button key={oldCategory} onClick={() => onClick(oldCategory)}>\n              {oldCategory}\n            </button>\n          )\n      )}\n    </li>\n  );\n}\n\nexport default ToDo;\n","import { useRecoilState, useRecoilValue } from \"recoil\";\n\nimport { categoryState, selectedCategoryState, toDoSelector } from \"./atoms\";\nimport CreateToDo from \"./components/CreateToDo\";\nimport ToDo from \"./components/ToDo\";\n\nfunction ToDoList() {\n  const toDos = useRecoilValue(toDoSelector);\n  const categories = useRecoilValue(categoryState);\n\n  const [selectedCategory, setSelectedCategory] = useRecoilState(\n    selectedCategoryState\n  );\n  const onInput = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    console.log(event.currentTarget.value);\n    setSelectedCategory(event.currentTarget.value as any);\n  };\n\n  console.log(toDos);\n\n  return (\n    <div style={{ marginInline: \"20px\" }}>\n      <h1>To Dos</h1>\n      <hr />\n      <select value={selectedCategory} onChange={onInput}>\n        {categories.map((category) => (\n          <option key={category} value={category}>\n            {category}\n          </option>\n        ))}\n      </select>\n      <CreateToDo />\n      <ul>\n        {toDos.map((toDo) => (\n          <ToDo key={toDo.id} {...toDo} />\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default ToDoList;\n","import { createGlobalStyle } from \"styled-components\";\nimport ToDoList from \"./ToDoList\";\n\nfunction App() {\n  const GlobalStyle = createGlobalStyle`\n    @import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\n    html, body, div, span, applet, object, iframe,\n    h1, h2, h3, h4, h5, h6, p, blockquote, pre,\n    a, abbr, acronym, address, big, cite, code,\n    del, dfn, em, img, ins, kbd, q, s, samp,\n    small, strike, strong, sub, sup, tt, var,\n    b, u, i, center,\n    dl, dt, dd, menu, ol, ul, li,\n    fieldset, form, label, legend,\n    table, caption, tbody, tfoot, thead, tr, th, td,\n    article, aside, canvas, details, embed,\n    figure, figcaption, footer, header, hgroup,\n    main, menu, nav, output, ruby, section, summary,\n    time, mark, audio, video {\n      margin: 0;\n      padding: 0;\n      border: 0;\n      font-size: 100%;\n      font: inherit;\n      vertical-align: baseline;\n    }\n    /* HTML5 display-role reset for older browsers */\n    article, aside, details, figcaption, figure,\n    footer, header, hgroup, main, menu, nav, section {\n      display: block;\n    }\n    /* HTML5 hidden-attribute fix for newer browsers */\n    *[hidden] {\n        display: none;\n    }\n    body {\n      line-height: 1;\n    }\n    menu, ol, ul {\n      list-style: none;\n    }\n    blockquote, q {\n      quotes: none;\n    }\n    blockquote:before, blockquote:after,\n    q:before, q:after {\n      content: '';\n      content: none;\n    }\n    table {\n      border-collapse: collapse;\n      border-spacing: 0;\n    }\n    * {\n      box-sizing: border-box;\n    }\n    body {\n      font-weight: 300;\n      font-family: 'Source Sans Pro', sans-serif;\n      background-color:${(props) => props.theme.bgColor};\n      color:${(props) => props.theme.textColor};\n      line-height: 1.2;\n    }\n    a {\n      text-decoration:none;\n      color:inherit;\n    }\n  `;\n\n  return (\n    <>\n      <GlobalStyle />\n      <ToDoList />\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { RecoilRoot } from \"recoil\";\nimport { ThemeProvider } from \"styled-components\";\n\nimport App from \"./App\";\nimport { darkTheme } from \"./theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <ThemeProvider theme={darkTheme}>\n        <App />\n      </ThemeProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","import { DefaultTheme } from \"styled-components\";\n\nexport const darkTheme: DefaultTheme = {\n  bgColor: \"#2f3640\",\n  textColor: \"white\",\n  accentColor: \"#9c88ff\",\n  cardBgColor: \"transparent\",\n};\n"],"sourceRoot":""}